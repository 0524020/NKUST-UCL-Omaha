// Copyright 2009-2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ========================================================================

import "oaidl.idl";
import "ocidl.idl";

// When adding interfaces to this file:
//  * Do not use "Google" or "GoogleUpdate" directly. Instead, use preprocessor
//    defines.
//  * Add a test for the Google-specific value to
//    omaha_customization_goopdate_apis_unittest.cc.

//
// Enums.
// These values can be passed to interface methods and/or compared to their
// output.
//

// Must be kept in sync with the enum in base/browser_utils.h.
typedef enum BrowserType {
  BROWSER_UNKNOWN           = 0,
  BROWSER_DEFAULT           = 1,
  BROWSER_INTERNET_EXPLORER = 2,
  BROWSER_FIREFOX           = 3,
  BROWSER_CHROME            = 4,
} BrowserType;

// The normal install flow proceeds from STATE_INIT through
// STATE_INSTALL_COMPLETE in order, skipping states that are not relevant.
// All exceptions and terminal states are start with STATE_INSTALL_COMPLETE.
typedef enum CurrentState {
  STATE_INIT = 1,
  STATE_WAITING_TO_CHECK_FOR_UPDATE = 2,
  STATE_CHECKING_FOR_UPDATE = 3,
  STATE_UPDATE_AVAILABLE = 4,
  STATE_WAITING_TO_DOWNLOAD = 5,
  STATE_RETRYING_DOWNLOAD = 6,
  STATE_DOWNLOADING = 7,
  STATE_DOWNLOAD_COMPLETE = 8,
  STATE_EXTRACTING = 9,
  STATE_APPLYING_DIFFERENTIAL_PATCH = 10,
  // TODO(omaha3): Should we move STATE_DOWNLOAD_COMPLETE here and eliminate
  // STATE_READY_TO_INSTALL?
  STATE_READY_TO_INSTALL = 11,
  STATE_WAITING_TO_INSTALL = 12,
  STATE_INSTALLING = 13,
  STATE_INSTALL_COMPLETE = 14,
  STATE_PAUSED = 15,
  STATE_NO_UPDATE = 16,
  STATE_ERROR = 17,
} CurrentState;

typedef enum InstallPriority {
  INSTALL_PRIORITY_LOW = 0,
  INSTALL_PRIORITY_HIGH = 10,
} InstallPriority;

// Specifies what the client should do after installation.
typedef enum PostInstallAction {
  POST_INSTALL_ACTION_DEFAULT = 0,

  // Caller should exit silently.
  POST_INSTALL_ACTION_EXIT_SILENTLY = 1,

  // Caller should launch the command.
  POST_INSTALL_ACTION_LAUNCH_COMMAND = 2,

  // Caller should launch the command and exit silently.
  POST_INSTALL_ACTION_EXIT_SILENTLY_ON_LAUNCH_COMMAND = 3,

  // The caller should ask the user to restart the browser. If the value of
  // IApp's browser is supported and postInstallUrl is valid, the client should
  // offer to restart the browser. If the user chooses to do so, the client
  // should launch the ICurrentState::postInstallUrl after shutting down and
  // restarting the browser.
  POST_INSTALL_ACTION_RESTART_BROWSER = 4,

  // Similar to POST_INSTALL_ACTION_RESTART_BROWSER, but ask the user to shut
  // down all browsers.
  POST_INSTALL_ACTION_RESTART_ALL_BROWSERS = 5,

  // The caller should ask the user to reboot the machine.
  POST_INSTALL_ACTION_REBOOT = 6,
} PostInstallAction;

enum AppCommandStatus {
  // The command has never been executed.
  COMMAND_STATUS_INIT = 1,
  // The command is running.
  COMMAND_STATUS_RUNNING = 2,
  // An error occurred while launching or monitoring the command.
  COMMAND_STATUS_ERROR = 3,
  // The command has completed execution.
  COMMAND_STATUS_COMPLETE = 4,
};

[
  object,
  dual,
  uuid(dfa4321a-bd7d-46b2-a190-4d6a16fb2ab3),
  helpstring("IGoogleUpdate3 Interface"),
  pointer_default(unique)
]
interface IGoogleUpdate3 : IDispatch {
  // TODO(Omaha): Perhaps this interface exposes helpers such as
  // RestartBrowsers, etc.

  // Returns the count of the AppBundles in this IGoogleUpdate3 interface.
  [id(1), propget] HRESULT Count([out, retval] long* count);

  // Returns an IDispatch of the AppBundle in this IGoogleUpdate3 interface at
  // the specified 0-based index. This property has the dispid of DISPID_VALUE
  // to make it the default property of IGoogleUpdate3.
  [id(DISPID_VALUE), propget] HRESULT Item([in] long index,
                                           [out, retval] IDispatch** bundle);
  // Returns an IDispatch to a newly created empty AppBundle.
  [id(2)] HRESULT createAppBundle([out, retval] IDispatch** app_bundle);
}

[
  object,
  dual,
  uuid(9bc1a83c-f46d-466d-ac7a-01f7375c4dcf),
  helpstring("IAppBundle Interface"),
  pointer_default(unique)
]
interface IAppBundle : IDispatch {
  // TODO(omaha3): AppBundle::display_name_ is never used. Should we remove?
  [propget] HRESULT displayName([out, retval] BSTR*);
  [propput] HRESULT displayName([in] BSTR);

  [propget] HRESULT displayLanguage([out, retval] BSTR*);
  [propput] HRESULT displayLanguage([in] BSTR);

  [propget] HRESULT installSource([out, retval] BSTR*);
  [propput] HRESULT installSource([in] BSTR);

  [propget] HRESULT originURL([out, retval] BSTR*);
  [propput] HRESULT originURL([in] BSTR);

  [propget] HRESULT offlineDirectory([out, retval] BSTR* offline_dir);
  [propput] HRESULT offlineDirectory([in] BSTR offline_dir);

  [propget] HRESULT sessionId([out, retval] BSTR* session_id);
  [propput] HRESULT sessionId([in] BSTR session_id);

  // Controls whether or not event pings should be sent at the end of
  // an operation.
  [propget] HRESULT sendPings([out, retval] VARIANT_BOOL* send_pings);
  [propput] HRESULT sendPings([in] VARIANT_BOOL send_pings);

  // The priority property determines download speed/priority and the number/
  // frequency of retries.  Use values from the InstallPriority enum.
  [propget] HRESULT priority([out, retval] long* priority);
  [propput] HRESULT priority([in] long priority);

  // Returns the count of the Apps in the AppBundle.
  [id(1), propget] HRESULT Count([out, retval] long* count);

  // Returns an IDispatch of the App in the AppBundle at the specified 0-based
  // index. This property has the dispid of DISPID_VALUE to make it the default
  // property of IAppBundle.
  [id(DISPID_VALUE), propget] HRESULT Item([in] long index,
                                           [out, retval] IDispatch** app);

  // Impersonation and primary tokens set by the client. Typically only
  // set by the gupdatem service. The gupdatem service exposes a narrow
  // interface to medium integrity clients. When a medium integrity client calls
  // into the gupdatem service, the gupdatem service captures the token of the
  // caller, and then calls put_altTokens() on the gupdate service, so that the
  // gupdate service can use it for future download() and install() requests.
  [propput] HRESULT altTokens([in] ULONG_PTR impersonation_token,
                              [in] ULONG_PTR primary_token,
                              [in] DWORD caller_proc_id);

  // Sets a HWND to associate with the client, if any.  This will be used as
  // the parent window for any dialogs that the server may need to display.
  [propput] HRESULT parentHWND([in] ULONG_PTR hwnd);

  // Initializes the bundle with the properties that have been set.
  [id(2)] HRESULT initialize();

  // Returns an IDispatch to a new App for the specified app id.
  // The App is added to the Bundle.
  [id(3)] HRESULT createApp([in] BSTR app_id,
                            [out, retval] IDispatch** app);

  // Returns an IDispatch to a newly created App for the specified app ID. The
  // App is populated with information from the existing installation and added
  // to the Bundle. Fails if the specified app is not installed.
  [id(4)] HRESULT createInstalledApp([in] BSTR app_id,
                                     [out, retval] IDispatch** app);

  // Creates App instances for all installed apps managed by this Omaha
  // instance. Each App is populated with information from the existing install.
  [id(5)] HRESULT createAllInstalledApps();

  // These methods are non-blocking. The operation is scheduled.
  [id(6)] HRESULT checkForUpdate();
  [id(7)] HRESULT download();
  [id(8)] HRESULT install();

  // All-in-one function for automatically updating all apps. Populates the
  // bundle then schedules the update, which includes the update check and
  // download and install, if necessary.
  [id(9)] HRESULT updateAllApps();

  // These three methods are non-blocking. The operation is requested.
  [id(10)] HRESULT stop();
  [id(11)] HRESULT pause();
  [id(12)] HRESULT resume();

  // Returns true if the bundle has an uncompleted non-blocking request.
  [id(13)] HRESULT isBusy([out, retval] VARIANT_BOOL* is_busy);

  // Downloads a package of an installed application.
  [id(14)] HRESULT downloadPackage([in] BSTR app_id, [in] BSTR package_name);

  // TODO(omaha): Define this aggregated bundle state. Is this really a property
  // or should it be getCurrentState?
  // The server and bundle are the only thing that can provide aggregated
  // time estimates for downloads. Also, aggregate percentage is not currently
  // available to the client because the total bytes to download is not
  // available from App in all post-update check states.
  // To do this, we will probably need to know the total expected download
  // size for all packages to be installed - those that are required or in use -
  // by the time the update check phase is complete.
  [id(15), propget] HRESULT currentState([out, retval] VARIANT* current_state);
};

[
  object,
  dual,
  uuid(9ebf415c-67b6-45cb-bcee-da5de483de47),
  helpstring("IApp Interface"),
  pointer_default(unique)
]
interface IApp : IDispatch {
  // Returns a version IDispatch object.
  [id(1), propget] HRESULT currentVersion([out, retval] IDispatch** current);
  [id(2), propget] HRESULT nextVersion([out, retval] IDispatch** next);

  [propget] HRESULT appId([out, retval] BSTR*);

  [propget] HRESULT displayName([out, retval] BSTR*);
  [propput] HRESULT displayName([in] BSTR);

  [propget] HRESULT language([out, retval] BSTR*);
  [propput] HRESULT language([in] BSTR);

  [propget] HRESULT ap([out, retval] BSTR*);
  [propput] HRESULT ap([in] BSTR);

  [propget] HRESULT ttToken([out, retval] BSTR*);
  [propput] HRESULT ttToken([in] BSTR);

  [propget] HRESULT iid([out, retval] BSTR*);
  [propput] HRESULT iid([in] BSTR);

  [propget] HRESULT brandCode([out, retval] BSTR*);
  [propput] HRESULT brandCode([in] BSTR);

  [propget] HRESULT clientId([out, retval] BSTR*);
  [propput] HRESULT clientId([in] BSTR);

  [propget] HRESULT labels([out, retval] BSTR*);
  [propput] HRESULT labels([in] BSTR);

  [propget] HRESULT referralId([out, retval] BSTR*);
  [propput] HRESULT referralId([in] BSTR);

  // Returns an IDispatch to a command defined by this installed app with the
  // specified ID, or NULL if this app is not installed or the command ID is not
  // recognized.
  [propget] HRESULT command([in] BSTR command_id,
                            [out, retval] IDispatch** command);

  // Use values from the BrowserType enum.
  [propget] HRESULT browserType([out, retval] UINT*);
  [propput] HRESULT browserType([in] UINT);

  [propget] HRESULT clientInstallData([out, retval] BSTR*);
  [propput] HRESULT clientInstallData([in] BSTR);

  [propget] HRESULT serverInstallDataIndex([out, retval] BSTR*);
  [propput] HRESULT serverInstallDataIndex([in] BSTR);

  // Set as soon as possible. Error pings are disabled until set to true.
  [propget] HRESULT isEulaAccepted([out, retval] VARIANT_BOOL*);
  [propput] HRESULT isEulaAccepted([in] VARIANT_BOOL);

  [propget] HRESULT usageStatsEnable([out, retval] UINT*);
  [propput] HRESULT usageStatsEnable([in] UINT);

  [propget] HRESULT installTimeDiffSec([out, retval] UINT*);

  // Returns an ICurrentState interface. The object underlying the interface has
  // static data that does not get updated as the server state changes. To get
  // the most "current" state, the currentState property needs to be queried
  // again.
  [propget] HRESULT currentState([out, retval] IDispatch**);
};

[
  object,
  dual,
  uuid(7a0f5fc2-3b37-4d7b-aa9b-f9f23722f4da),
  helpstring("IApp2 Interface"),
  pointer_default(unique)
]
interface IApp2 : IApp {
  [propget] HRESULT untrustedData([out, retval] BSTR*);
  [propput] HRESULT untrustedData([in] BSTR);
};

[
  object,
  dual,
  uuid(18a36a78-fa28-4993-b45e-3409c57e10f1),
  helpstring("IAppCommand Interface"),
  pointer_default(unique)
]
interface IAppCommand : IDispatch {
  [propget] HRESULT isWebAccessible([out, retval] VARIANT_BOOL*);
  // Use values from the AppCommandStatus enum.
  [propget] HRESULT status([out, retval] UINT*);
  [propget] HRESULT exitCode([out, retval] DWORD*);
  HRESULT execute([in, optional] VARIANT arg1,
                  [in, optional] VARIANT arg2,
                  [in, optional] VARIANT arg3,
                  [in, optional] VARIANT arg4,
                  [in, optional] VARIANT arg5,
                  [in, optional] VARIANT arg6,
                  [in, optional] VARIANT arg7,
                  [in, optional] VARIANT arg8,
                  [in, optional] VARIANT arg9);
};

[
  object,
  dual,
  uuid(e5a2baac-1c63-4439-aea3-4e62cc9b52a2),
  helpstring("IAppCommand2 Interface"),
  pointer_default(unique)
]
interface IAppCommand2 : IAppCommand {
  [propget] HRESULT output([out, retval] BSTR*);
};

[
  object,
  dual,
  uuid(095d3c67-dd98-4c6e-ba9d-613224882558),
  helpstring("IAppVersion Interface"),
  pointer_default(unique)
]
interface IAppVersion : IDispatch {
  [propget] HRESULT version([out, retval] BSTR*);

  // [propget] HRESULT installManifest([out, retval] BSTR*);

  // Returns the count of the Packages in the AppVersion.
  [propget] HRESULT packageCount([out, retval] long* count);

  // Returns an IDispatch of the Package in the AppVersion at the specified
  // 0-based index.
  [propget] HRESULT package([in] long index,
                            [out, retval] IDispatch** package);
};

[
  object,
  dual,
  uuid(b2a33803-ca4c-4ab6-ae07-42f1a196c29d),
  helpstring("IPackage Interface"),
  pointer_default(unique)
]
interface IPackage : IDispatch {
  // Retrieves the package from the package cache and copies it to the
  // directory provided. Returns an error is the package is not available
  // locally.
  [id(1)] HRESULT get([in] BSTR dir);

  // Returns true if the package has been downloaded and is available
  // locally.
  [propget] HRESULT isAvailable([out, retval] VARIANT_BOOL*);

  // Returns the manifest name of the package.
  [propget] HRESULT filename([out, retval] BSTR*);
};

// TODO(omaha3): We should figure out what else we are going to want in this
// interface before dogfood even if we do not implement it.
[
  object,
  dual,
  uuid(3825eded-8aa7-4f57-a576-5ff23e859d52),
  helpstring("ICurrentState Interface"),
  pointer_default(unique)
]
interface ICurrentState : IDispatch {
  // This interface is exposed to web clients!
  // TODO(omaha3): Update valid comments once we settle on an implementation.

  // A value from the CurrentState enum. This value determines which of the
  // properties below are valid.
  [propget] HRESULT stateValue([out, retval] LONG*);

  // The remaining properties are only valid in the specified states. For all
  // other states, the values are not specified.

  // This property is valid only when stateValue is STATE_UPDATE_AVAILABLE.
  [propget] HRESULT availableVersion([out, retval] BSTR*);

  // The following three properties are only valid when stateValue is
  // STATE_WAITING_TO_DOWNLOAD, STATE_RETRYING_DOWNLOAD, STATE_DOWNLOADING,
  // STATE_DOWNLOAD_COMPLETE, STATE_EXTRACTING,
  // STATE_APPLYING_DIFFERENTIAL_PATCH, or STATE_READY_TO_INSTALL.

  // Bytes downloaded so far.
  [propget] HRESULT bytesDownloaded([out, retval] ULONG*);

  // Total bytes to download.
  [propget] HRESULT totalBytesToDownload([out, retval] ULONG*);

  // Estimated download time remaining in ms. -1 indicates unknown.
  // Progress may not always be available, so clients should handle the -1 case.
  [propget] HRESULT downloadTimeRemainingMs([out, retval] LONG*);

  [propget] HRESULT nextRetryTime([out, retval] ULONGLONG*);

  // TODO(omaha 3): Need some way to indicate reconnecting, retrying, etc.

  // The following two properties are only valid when stateValue is
  // STATE_INSTALLING or STATE_INSTALL_COMPLETE.

  // Current install progress in percentage from 0 to 100. -1 indicates unknown.
  // Progress may not always be available, so clients should handle the -1 case.
  [propget] HRESULT installProgress([out, retval] LONG*);

  // Estimated download time remaining in ms. -1 indicates unknown.
  // Progress may not always be available, so clients should handle the -1 case.
  [propget] HRESULT installTimeRemainingMs([out, retval] LONG*);

  // The following four properties are only valid when stateValue is
  // STATE_ERROR:

  // Returns true if the app has been canceled.
  [propget] HRESULT isCanceled([out, retval] VARIANT_BOOL* is_canceled);

  // Error code.
  [propget] HRESULT errorCode([out, retval] LONG*);

  // Error extra code.
  [propget] HRESULT extraCode1([out, retval] LONG*);

  // The following three properties are only valid when stateValue is
  // STATE_ERROR or STATE_INSTALL_COMPLETE.
  // TODO(omaha3): If STATE_DOWNLOAD_COMPLETE or STATE_READY_TO_INSTALL becomes
  // a terminal state, does it support completion messages?

  // Completion message, localized in the specified language.
  // TODO(omaha3): If we're going to have bundle error messages too, should the
  // language be at bundle level? Should bundle have its own language setter?
  [propget] HRESULT completionMessage([out, retval] BSTR*);

  // Application installer result code. This is to be used as additional
  // information only. Success/failure should be determined using errorCode.
  // This is an error if errorCode is GOOPDATEINSTALL_E_INSTALLER_FAILED.
  [propget] HRESULT installerResultCode([out, retval] LONG*);

  // Application installer extra code.
  [propget] HRESULT installerResultExtraCode1([out, retval] LONG*);

  // A command that needs to be launched by the client after installation.
  [propget] HRESULT postInstallLaunchCommandLine([out, retval] BSTR*);

  // URL to be launched after restarting the browser.
  [propget] HRESULT postInstallUrl([out, retval] BSTR*);

  // Returns a PostInstallAction value indicating the action to be taken by the
  // client after installation.
  [propget] HRESULT postInstallAction([out, retval] LONG*);
}

[
  object,
  dual,
  uuid(4be2be5c-71a5-4479-8fd9-b7881ae7715e),
  helpstring("IRegistrationUpdateHook Interface"),
  pointer_default(unique),
]
interface IRegistrationUpdateHook : IDispatch {
  HRESULT UpdateRegistry([in] BSTR app_id, [in] VARIANT_BOOL is_machine);
};

[
  object,
  uuid(74f1b3ac-227a-4b8d-b161-d4e7245550e8),
  helpstring("ICredentialDialog Interface"),
  pointer_default(unique),
]
interface ICredentialDialog : IUnknown {
  HRESULT QueryUserForCredentials([in] ULONG_PTR owner_hwnd,
                                  [in] BSTR server,
                                  [in] BSTR message,
                                  [out] BSTR* username,
                                  [out] BSTR* password);
};

[
  object,
  dual,
  uuid(60609901-0240-40aa-9242-21846cfe1bd4),
  helpstring("IPolicyStatus Interface"),
  pointer_default(unique)
]
interface IPolicyStatus : IDispatch {
  // Global Update Policies

  // Returns the time interval between update checks in minutes.
  // 0 indicates updates are disabled.
  [propget] HRESULT lastCheckPeriodMinutes([out, retval] DWORD* minutes);

  // For domain-joined machines, returns the suppressed times if any, and also
  // checks the current time against the times that updates are suppressed.
  // Updates are suppressed if the current time falls between the start time and
  // the duration.
  // The duration does not account for daylight savings time. For instance, if
  // the start time is 22:00 hours, and with a duration of 8 hours, the updates
  // will be suppressed for 8 hours regardless of whether daylight savings time
  // changes happen in between.
  [propget] HRESULT updatesSuppressedTimes(
      [out] DWORD* start_hour,
      [out] DWORD* start_min,
      [out] DWORD* duration_min,
      [out] VARIANT_BOOL* are_updates_suppressed);

  // Returns the value of the "DownloadPreference" group policy or an
  // empty string if the group policy does not exist, the policy is unknown, or
  // an error happened.
  [propget] HRESULT downloadPreferenceGroupPolicy([out, retval] BSTR* pref);

  // Gets the total disk size limit for cached packages. When this limit is hit,
  // packages may be deleted from oldest until total size is below the limit.
  [propget] HRESULT packageCacheSizeLimitMBytes([out, retval] DWORD* limit);

  // Gets the package cache life limit. If a cached package is older than this
  // limit, it may be deleted.
  [propget] HRESULT packageCacheExpirationTimeDays([out, retval] DWORD* days);

  // Application Update Policies

  // Returns 1 if installation of the specified app is allowed.
  // Otherwise, returns 0.
  [propget] HRESULT effectivePolicyForAppInstalls([in] BSTR app_id,
                                                  [out, retval] DWORD* policy);

  // Returns 1 if updates of the specified app is allowed.
  // Otherwise, returns one of 0 (Disabled), 2 (ManualUpdatesOnly), or
  // 3 (AutomaticUpdatesOnly).
  [propget] HRESULT effectivePolicyForAppUpdates([in] BSTR app_id,
                                                 [out, retval] DWORD* policy);

  // Returns the target version prefix for the app, if the machine is joined to
  // a domain and has the corresponding policy set.
  // Examples:
  // * "" (or not configured): update to latest version available.
  // * "55.": update to any minor version of 55 (e.g. 55.24.34 or 55.60.2).
  // * "55.2.": update to any minor version of 55.2 (e.g. 55.2.34 or 55.2.2).
  // * "55.24.34": update to this specific version only.
  [propget] HRESULT targetVersionPrefix([in] BSTR app_id,
                                        [out, retval] BSTR* prefix);

  // Returns whether the RollbackToTargetVersion policy has been set for the
  // app. If RollbackToTargetVersion is set, the TargetVersionPrefix policy
  // governs the version to rollback clients with higher versions to.
  [propget] HRESULT isRollbackToTargetVersionAllowed(
      [in] BSTR app_id,
      [out, retval] VARIANT_BOOL* rollback_allowed);
};

// BEGIN gupdatem interfaces.

// The following interfaces are exposed as a narrower version of the
// IGoogleUpdate3 interface from the gupdatem service. These interfaces are
// meant for use from medium and low integrity clients.

[
  object,
  dual,
  uuid(65c0b3b1-585b-4480-be45-d1e8abf4dbb4),
  helpstring("IGoogleUpdate3Web Interface"),
  pointer_default(unique),
]
interface IGoogleUpdate3Web : IDispatch {
  HRESULT createAppBundleWeb([out, retval] IDispatch** app_bundle_web);
};

[
  object,
  uuid(c8b302ce-a0b2-48e3-a090-2b4add8f2961),
  helpstring("IGoogleUpdate3WebSecurity Interface"),
  pointer_default(unique),
]
interface IGoogleUpdate3WebSecurity : IUnknown {
  HRESULT setOriginURL([in] BSTR origin_url);
};

[
  object,
  dual,
  uuid(db688cac-b80b-48f6-87ae-bf6af76ed486),
  helpstring("IAppBundleWeb Interface"),
  pointer_default(unique),
]
interface IAppBundleWeb : IDispatch {
  [id(2)] HRESULT createApp([in] BSTR app_guid,
                            [in] BSTR brand_code,
                            [in] BSTR language,
                            [in] BSTR ap);
  [id(3)] HRESULT createInstalledApp([in] BSTR app_id);
  [id(4)] HRESULT createAllInstalledApps();

  [propget] HRESULT displayLanguage([out, retval] BSTR*);
  [propput] HRESULT displayLanguage([in] BSTR);

  [propput] HRESULT parentHWND([in] ULONG_PTR hwnd);

  [propget] HRESULT length([out, retval] int* index);
  [id(DISPID_VALUE), propget] HRESULT appWeb(
      [in] int index, [out, retval] IDispatch** app_web);

  HRESULT initialize();

  HRESULT checkForUpdate();
  HRESULT download();
  HRESULT install();

  HRESULT pause();
  HRESULT resume();
  HRESULT cancel();

  HRESULT downloadPackage([in] BSTR app_id, [in] BSTR package_name);

  [propget] HRESULT currentState([out, retval] VARIANT* current_state);
};

[
  object,
  dual,
  uuid(a01a19e9-911f-48a7-acd5-ba570cff92ef),
  helpstring("IAppWeb Interface"),
  pointer_default(unique),
]
interface IAppWeb : IDispatch {
  [propget] HRESULT appId([out, retval] BSTR*);

  // Returns an IAppVersionWeb IDispatch object.
  [propget] HRESULT currentVersionWeb([out, retval] IDispatch** current);
  [propget] HRESULT nextVersionWeb([out, retval] IDispatch** next);

  // Returns an IAppCommandWeb IDispatch object, or NULL.
  [propget] HRESULT command([in] BSTR command_id,
                            [out, retval] IDispatch** command);

  HRESULT cancel();

  [propget] HRESULT currentState([out, retval] IDispatch** current_state);

  HRESULT launch();
  HRESULT uninstall();

  [propget] HRESULT serverInstallDataIndex([out, retval] BSTR*);
  [propput] HRESULT serverInstallDataIndex([in] BSTR);
};

[
  object,
  dual,
  uuid(313047a5-68bc-4f28-967c-011f5b0f69e0),
  helpstring("IAppCommandWeb Interface"),
  pointer_default(unique)
]
interface IAppCommandWeb : IDispatch {
  // Use values from the AppCommandStatus enum.
  [propget] HRESULT status([out, retval] UINT*);
  [propget] HRESULT exitCode([out, retval] DWORD*);
  [propget] HRESULT output([out, retval] BSTR*);
  HRESULT execute([in, optional] VARIANT arg1,
                  [in, optional] VARIANT arg2,
                  [in, optional] VARIANT arg3,
                  [in, optional] VARIANT arg4,
                  [in, optional] VARIANT arg5,
                  [in, optional] VARIANT arg6,
                  [in, optional] VARIANT arg7,
                  [in, optional] VARIANT arg8,
                  [in, optional] VARIANT arg9);
};

[
  object,
  dual,
  uuid(d3eaa41d-f8f6-4e92-a0ae-c2c939279687),
  helpstring("IAppVersionWeb Interface"),
  pointer_default(unique)
]
interface IAppVersionWeb : IDispatch {
  [propget] HRESULT version([out, retval] BSTR*);

  // Returns the count of the Packages in the AppVersion.
  [propget] HRESULT packageCount([out, retval] long* count);

  // TODO(omaha3): Implement this after a security review.
  // Returns an IDispatch of the Package in the AppVersion at the specified
  // 0-based index.
  [propget] HRESULT packageWeb([in] long index,
                               [out, retval] IDispatch** package);
};

[
  object,
  dual,
  uuid(e76481b6-0b2e-414c-8f51-d02955c0c738),
  helpstring("ICoCreateAsyncStatus Interface"),
  pointer_default(unique)
]
interface ICoCreateAsyncStatus : IDispatch {
  [propget] HRESULT isDone([out, retval] VARIANT_BOOL* is_done);
  [propget] HRESULT completionHResult([out, retval] LONG* hr);
  [propget] HRESULT createdInstance([out, retval] IDispatch** instance);
};

[
  object,
  uuid(a1a9d422-5947-44c8-b47b-bc5f94678fac),
  helpstring("ICoCreateAsync Interface"),
  pointer_default(unique)
]
interface ICoCreateAsync : IUnknown {
  HRESULT createOmahaMachineServerAsync(
      [in] BSTR origin_url,
      [in] BOOL create_elevated,
      [out, retval] ICoCreateAsyncStatus** status);
};

// END gupdatem interfaces.

// BEGIN Legacy google_update_idl interfaces.

[
  object,
  uuid(9bcba61a-4266-409b-96d1-24c8473d2bbf),
  oleautomation,
  nonextensible,
  pointer_default(unique)
]
interface IBrowserHttpRequest2 : IUnknown {
  // This method will send request/data from the browser process.
  // @param url                     URL where request will be send.
  // @param post_data               POST data, if any. Can be NULL.
  // @param request_headers         HTTP request headers, if any. Can be NULL.
  // @param response_headers_needed HTTP response headers that are needed.
  //                                Should be one of the values listed here:
  //                                    http://msdn.microsoft.com/aa385351.aspx
  //                                The input is a SAFEARRAY of DWORD. Can be a
  //                                VT_EMPTY.
  // @param response_headers        HTTP response headers, returned as SAFEARRAY
  //                                of BSTR. The values corresponding one-to-one
  //                                with the response_headers_needed values. Can
  //                                be NULL if response_headers_needed==VT_EMPTY
  // @param response_code           HTTP response code.
  // @param cache_filename          Cache file that contains the response data.
  HRESULT Send([in] BSTR url,
               [in] BSTR post_data,
               [in] BSTR request_headers,
               [in] VARIANT response_headers_needed,
               [out] VARIANT* response_headers,
               [out] DWORD* response_code,
               [out] BSTR* cache_filename);
};

[
  object,
  oleautomation,
  uuid(9a4d699e-37d1-4f26-aac7-46a3f1acf04a),
  helpstring("Google Update IProcessLauncher Interface"),
  pointer_default(unique)
]
interface IProcessLauncher : IUnknown {
  // @param cmd_line The full command line to execute.
  HRESULT LaunchCmdLine([in, string] const WCHAR* cmd_line);

  // @param browser_type The browser to start.
  // @param url The url to launch the browser with.
  HRESULT LaunchBrowser([in] DWORD browser_type,
                        [in, string] const WCHAR* url);

  // @param app_id Unique id to identify the calling client application
  // @param event_id Unique id for the command
  // @param caller_proc_id The process id of the calling process
  // @param proc_handle The process handle valid in the caller's context
  HRESULT LaunchCmdElevated([in, string] const WCHAR* app_guid,
                            [in, string] const WCHAR* cmd_id,
                            [in] DWORD caller_proc_id,
                            [out] ULONG_PTR* proc_handle);
};

[
  object,
  oleautomation,
  uuid(273ac403-6844-477b-a146-94e9b65507bd),
  helpstring("Google Update IProcessLauncher2 Interface"),
  pointer_default(unique)
]
interface IProcessLauncher2 : IProcessLauncher {
  // Launches the command line, returning the COM server's process ID and
  // handles to the launched process and its stdout. The caller is responsible
  // for closing the returned handles (by passing DUPLICATE_CLOSE_SOURCE to
  // DuplicateHandle, for instance).
  // @param cmd_line The full command line to execute.
  // @param server_proc_id The process id of the IProcessLauncher2 COM server.
  // @param proc_handle The process handle valid in the server's context
  // @param stdout_handle The child process's stdout handle valid in the
  //                      server's context.
  HRESULT LaunchCmdLineEx([in, string] const WCHAR* cmd_line,
                          [out] DWORD* server_proc_id,
                          [out] ULONG_PTR* proc_handle,
                          [out] ULONG_PTR* stdout_handle);
};

typedef enum {
  COMPLETION_CODE_SUCCESS = 1,
  COMPLETION_CODE_SUCCESS_CLOSE_UI,
  COMPLETION_CODE_ERROR,
  COMPLETION_CODE_RESTART_ALL_BROWSERS,
  COMPLETION_CODE_REBOOT,
  COMPLETION_CODE_RESTART_BROWSER,
  COMPLETION_CODE_RESTART_ALL_BROWSERS_NOTICE_ONLY,
  COMPLETION_CODE_REBOOT_NOTICE_ONLY,
  COMPLETION_CODE_RESTART_BROWSER_NOTICE_ONLY,
  COMPLETION_CODE_RUN_COMMAND,
} LegacyCompletionCodes;

[
  object,
  oleautomation,
  uuid(036d0cff-fecf-427b-a96e-f3b60be99513),
  helpstring("GoogleUpdate UI-specific events Interface"),
  pointer_default(unique)
]
interface IProgressWndEvents : IUnknown {
  // The UI is closing down. The user has clicked on either the "X" or the
  // other buttons of the UI to close the window.
  HRESULT DoClose();

  // Pause has been clicked on.
  HRESULT DoPause();

  // Resume has been clicked on.
  HRESULT DoResume();

  // RestartBrowsers button has been clicked on.
  HRESULT DoRestartBrowsers();

  // Reboot button has been clicked on.
  HRESULT DoReboot();

  // Launch Browser.
  HRESULT DoLaunchBrowser([in, string] const WCHAR* url);
};


[
  object,
  oleautomation,
  uuid(363d9339-4de6-4213-b11c-9f1201110782),
  helpstring("IJobObserver Interface"),
  pointer_default(unique)
]
interface IJobObserver : IUnknown {
  HRESULT OnShow();
  HRESULT OnCheckingForUpdate();
  HRESULT OnUpdateAvailable([in, string] const WCHAR* version_string);
  HRESULT OnWaitingToDownload();
  HRESULT OnDownloading([in] int time_remaining_ms, [in] int pos);
  HRESULT OnWaitingToInstall();
  HRESULT OnInstalling();
  HRESULT OnPause();
  HRESULT OnComplete([in] LegacyCompletionCodes code,
                     [in, string] const WCHAR* completion_text);
  HRESULT SetEventSink([in] IProgressWndEvents* ui_sink);
};

[
  object,
  oleautomation,
  uuid(e1e030ea-3bf1-4313-8d83-cbdaff5c13b6),
  helpstring("IJobObserver2 Interface"),
  pointer_default(unique)
]
interface IJobObserver2 : IUnknown {
  // @param time_remaining_ms Remaining install time.
  // @param pos Current install progress in percentage from 0 to 100. -1
  //     indicates unknown.
  HRESULT OnInstalling2([in] int time_remaining_ms, [in] int pos);
};

[
  object,
  oleautomation,
  uuid(87b09ce2-e5fb-4b90-ba5e-e53a3b01290e),
  helpstring("IGoogleUpdate Interface"),
  pointer_default(unique)
]
interface IGoogleUpdate : IUnknown {
  // @param guid The guid for the app to be updated.
  // @param observer The eventing interface.
  HRESULT CheckForUpdate([in, string] const WCHAR* guid,
                         [in] IJobObserver* observer);

  // @param guid The guid for the app to be updated.
  // @param observer The eventing interface.
  HRESULT Update([in, string] const WCHAR* guid,
                 [in] IJobObserver* observer);
};

// IGoogleUpdateCore is an internal Omaha interface.
[
  object,
  oleautomation,
  uuid(011089c2-71eb-4087-ab5e-9436ea7917a0),
  helpstring("Google Update Core Interface"),
  pointer_default(unique)
]
interface IGoogleUpdateCore : IUnknown
{
  // Runs a command elevated.
  //
  // @param app_id Unique id to identify the calling client application
  // @param event_id Unique id for the command
  // @param caller_proc_id The process id of the calling process
  // @param proc_handle The process handle valid in the caller's context
  HRESULT LaunchCmdElevated([in, string] const WCHAR* app_guid,
                            [in, string] const WCHAR* cmd_id,
                            [in] DWORD caller_proc_id,
                            [out] ULONG_PTR* proc_handle);
};

// END Legacy google_update_idl interfaces.

[
  uuid(d3b1f512-ce4f-41e1-bffa-ca1180179a21),
  version(1.0),
  helpstring("Omaha 3.0 Type Library")
]
library GoogleUpdate3Lib {
  importlib("stdole2.tlb");

  // These Interfaces are forward declared to ensure that they are described in
  // the generated TLB file. This is required for ATL to correctly implement the
  // corresponding IDispatch interfaces.
  interface IGoogleUpdate3;
  interface IAppBundle;
  interface IApp;
  interface IApp2;
  interface IAppCommand;
  interface IAppCommand2;
  interface IAppVersion;
  interface IPackage;
  interface ICurrentState;

  interface IPolicyStatus;
  interface IGoogleUpdate3Web;
  interface IAppBundleWeb;
  interface IAppWeb;
  interface IAppCommandWeb;
  interface IAppVersionWeb;
  interface ICoCreateAsyncStatus;

  [
    uuid(1d605cb8-db04-4be8-a1ab-e4a01d201fc6),
    helpstring("GoogleUpdate3 Class for per-user applications")
  ]
  coclass GoogleUpdate3UserClass {
    [default] interface IDispatch;
  }

  [
    uuid(423b41c4-9334-4f57-af75-87d50a5f0d98),
    helpstring("GoogleUpdate3 Service Class for machine applications")
  ]
  coclass GoogleUpdate3ServiceClass {
    [default] interface IDispatch;
  }

  [
    uuid(750458dc-196e-49ef-afd7-131f90f33246),
    helpstring("GoogleUpdate3Web for user applications")
  ]
  coclass GoogleUpdate3WebUserClass {
    [default] interface IDispatch;
  }

  [
    uuid(1bd65dbb-9873-4662-8122-6dfc333fd297),
    helpstring("Pass-through broker for the GoogleUpdate3WebServiceClass")
  ]
  coclass GoogleUpdate3WebMachineClass {
    [default] interface IDispatch;
  }

  [
    uuid(ed8cec12-d71e-435a-8a18-f77394241900),
    helpstring("GoogleUpdate3Web")
  ]
  coclass GoogleUpdate3WebServiceClass {
    [default] interface IDispatch;
  }

  [
    uuid(b376fb95-3cae-43a1-bb0e-618020e6fd38),
    helpstring("Fallback mechanism if GoogleUpdate3WebServiceClass fails")
  ]
  coclass GoogleUpdate3WebMachineFallbackClass {
    [default] interface IDispatch;
  }

  [
    uuid(56f96fea-46d9-49ce-8f64-4958f1e0437f),
    helpstring("CurrentStateUserClass")
  ]
  coclass CurrentStateUserClass {
    [default] interface ICurrentState;
  }

  [
    uuid(dacef583-d04e-45c4-a1e8-c08d86bda89a),
    helpstring("CurrentStateMachineClass")
  ]
  coclass CurrentStateMachineClass {
    [default] interface ICurrentState;
  }

  [
    uuid(81671551-346d-4fa2-a4b3-14020f0747ce),
    helpstring("CoCreateAsyncClass")
  ]
  coclass CoCreateAsyncClass {
    [default] interface IUnknown;
  }

  [
    uuid(94a0a2d6-6d2e-4396-96e9-ef66ef830da1),
    helpstring("CredentialDialogUserClass")
  ]
  coclass CredentialDialogUserClass {
    [default] interface IUnknown;
  }

  [
    uuid(dceb38ef-f398-47d0-86c3-8b04764b5e8d),
    helpstring("CredentialDialogMachineClass")
  ]
  coclass CredentialDialogMachineClass {
    [default] interface IUnknown;
  }

  [
    uuid(0dde2c5d-00c8-45f6-a213-e9d90cea9548),
    helpstring("PolicyStatusClass Class")
  ]
  coclass PolicyStatusClass {
    [default] interface IUnknown;
  }

  [
    uuid(___AUTO_GENERATED_GUID___),
    helpstring("GoogleComProxyMachineClass")
  ]
  coclass GoogleComProxyMachineClass {
    [default] interface IUnknown;
  }

  [
    uuid(___AUTO_GENERATED_GUID___),
    helpstring("GoogleComProxyUserClass")
  ]
  coclass GoogleComProxyUserClass {
    [default] interface IUnknown;
  }

  // BEGIN Legacy google_update_idl coclasses.

  [
    uuid(9e15d2cb-7c14-4c92-a2c2-da905f87f45b),
    helpstring("ProcessLauncherClass Class")
  ]
  coclass ProcessLauncherClass {
    [default] interface IUnknown;
  }

  [
    uuid(c4c909e2-af3b-4bbd-8857-4c447800c9d9),
    helpstring("OnDemand updates for per-user applications.")
  ]
  coclass OnDemandUserAppsClass {
    [default] interface IUnknown;
  }

  [
    uuid(dbecb873-1518-4b79-82e7-be95bd3d7ab7),
    helpstring("OnDemand pass-through broker for machine applications.")
  ]
  coclass OnDemandMachineAppsClass {
    [default] interface IUnknown;
  }

  [
    uuid(21b2c9af-376f-4d84-b3d6-e7abd5ed80b3),
    helpstring("OnDemand updates for per-machine applications.")
  ]
  coclass OnDemandMachineAppsServiceClass {
    [default] interface IUnknown;
  }

  [
    uuid(e612c819-95af-4d09-b1d3-0dff6c0e9c3d),
    helpstring("Fallback for if OnDemandMachineAppsServiceClass fails.")
  ]
  coclass OnDemandMachineAppsFallbackClass {
    [default] interface IUnknown;
  }

  [
    uuid(f2a4f8f9-80db-4d00-82f2-cf411c8d5c1c),
    helpstring("GoogleUpdateCore Class")
  ]
  coclass GoogleUpdateCoreClass
  {
    [default] interface IUnknown;
  }

  [
    uuid(4a1f86fd-1033-4af9-b904-be046b3959fa),
    helpstring("GoogleUpdateCore Machine Class")
  ]
  coclass GoogleUpdateCoreMachineClass
  {
    [default] interface IUnknown;
  }

  // END Legacy google_update_idl coclasses.
};
